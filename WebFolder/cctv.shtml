<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="/favicon.ico" type="image/vnd.microsoft.icon"/>
  <link rel="stylesheet" href="cctv.css">
  <title>&nbsp;</title>
</head>
<body>
  <!--#4dcode 
    ARRAY TEXT($names; 0)
    ARRAY TEXT($values; 0)
    WEB GET HTTP HEADER($names; $values)
    var $room; $host : Text
    var $i : Integer
    $i:=Find in array($names; "Host")
    If ($i#-1)
      $host:=$values{$i}
    End if 
  -->  
  <div>
    <select id="inputSources"></select>
  </div>
    <video id="videoElement" autoplay playsinline></video>
  <script>
    (function(){      
      const queryString = window.location.search;
      const urlParams = new URLSearchParams(queryString);
      const roomNumber = urlParams.get('room');
      const room = roomNumber ? roomNumber : 1;
      const urlwss="ws://$4DHTML($host)/cctv?room="+room;
      const videoElement = document.getElementById('videoElement');
      const inputSources = document.getElementById('inputSources');
      let ws;
      let currentStream;
                 
      function init(){
        document.title = "room " + room;    
        videoElement.addEventListener('play', () => {
          const sendFrame = () => {
            if (videoElement.paused || videoElement.ended) {
              return;
            }
            const canvas = document.createElement('canvas');
            canvas.width = videoElement.videoWidth;
            canvas.height = videoElement.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
            canvas.toBlob((blob) => {
              ws.send(blob);
            }, 'image/jpeg');      
            setTimeout(sendFrame, 100); 
          };
          sendFrame();
        });
        if (ws){
          ws.close();
        }
        ws = new WebSocket(urlwss);
        ws.binaryType = 'blob';
        ws.addEventListener('close',function close(){
          ws=null;
        });
      }
      
      init();
      
      navigator.mediaDevices.enumerateDevices()
      .then(gotDevices);
      
      function gotDevices(mediaDevices) {
        inputSources.replaceChildren();
        let count = 1;
        mediaDevices.forEach(mediaDevice => {
          if (mediaDevice.kind === 'videoinput') {
            const option = document.createElement('option');
            option.value = mediaDevice.deviceId;
            const label = mediaDevice.label || `Camera ${count++}`;
            const textNode = document.createTextNode(label);
            option.appendChild(textNode);
            inputSources.appendChild(option);
          }
        });
        
        if ((inputSources.children.length != 0) && (currentStream == null)){
          selectSource(inputSources.firstChild.value);
        }
        
      }
          
      function stopMediaTracks(stream) {
        stream.getTracks().forEach(track => {
          track.stop();
        });
      }    
          
      function selectSource(deviceId, noUpdate) {
        const videoConstraints = {};
        videoConstraints.deviceId = { exact: deviceId };
        const constraints = {
          video: videoConstraints,
          audio: false
        };
        navigator.mediaDevices.getUserMedia(constraints)
        .then((stream) => {
          currentStream = stream;
          videoElement.srcObject = stream;
          return navigator.mediaDevices.enumerateDevices();
        })
        .then(noUpdate ? null : gotDevices)
        .catch((error) => {
          console.error('Error accessing webcam:', error);
        });
      }    
      
      inputSources.addEventListener('change', event => {
        if (typeof currentStream !== 'undefined') {
          stopMediaTracks(currentStream);
        }
        selectSource(event.currentTarget.value, true);
      });  
            
    })();  
    </script>
  </body>
</html>    
